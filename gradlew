#!/usr/bin/env sh

##############################################################################
##
##  Gradle start up script for POSIX generated by Gradle.
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS="-Xmx64m -Xms64m"

APP_NAME="Gradle"
APP_BASE_NAME=$(basename "$0")

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support.
# shellcheck disable=SC2039
unameOut=$(uname)
case "$unameOut" in
  CYGWIN*|MINGW*|MSYS*)
    msys=true
    ;;
  *)
    msys=false
    ;;
esac

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/bin/java" ] ; then
        JAVACMD="$JAVA_HOME/bin/java"
    else
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
    fi
else
    JAVACMD="java"
fi

if ! command -v "$JAVACMD" >/dev/null 2>&1 ; then
    die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH."
fi

# Determine the directory containing this script.
APP_HOME=$(cd "$(dirname "$0")"; pwd -P)

WRAPPER_JAR=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

if [ ! -f "$WRAPPER_JAR" ]; then
    mkdir -p "$APP_HOME/gradle/wrapper"
    DOWNLOAD_URL="https://services.gradle.org/distributions/gradle-8.2-bin.zip"
    TMP_DIR=$(mktemp -d)
    ZIP_FILE="$TMP_DIR/gradle-8.2-bin.zip"
    if command -v curl >/dev/null 2>&1; then
        curl -sSL "$DOWNLOAD_URL" -o "$ZIP_FILE"
    elif command -v wget >/dev/null 2>&1; then
        wget -q "$DOWNLOAD_URL" -O "$ZIP_FILE"
    else
        die "ERROR: curl or wget is required to download Gradle wrapper."
    fi
    if ! command -v unzip >/dev/null 2>&1; then
        die "ERROR: unzip is required to extract Gradle wrapper."
    fi
    unzip -q "$ZIP_FILE" -d "$TMP_DIR"
    WRAPPER_SOURCE="$TMP_DIR/gradle-8.2/lib/plugins/gradle-wrapper-8.2.jar"
    if [ ! -f "$WRAPPER_SOURCE" ]; then
        die "ERROR: No gradle-wrapper JAR found in distribution."
    fi
    cp "$WRAPPER_SOURCE" "$WRAPPER_JAR"
    rm -rf "$TMP_DIR"
fi

CLASSPATH=$WRAPPER_JAR

# For Cygwin or MSYS, convert paths to Windows format.
if [ "$msys" = "true" ] ; then
    APP_HOME=$(cygpath --path --mixed "$APP_HOME")
    CLASSPATH=$(cygpath --path --mixed "$CLASSPATH")
    JAVACMD=$(cygpath --unix "$JAVACMD")
fi

# Increase the maximum file descriptors if possible.
if [ "$MAX_FD" != "maximum" ] ; then
    ulimit -n "$MAX_FD" || warn "Could not set maximum file descriptor limit: $MAX_FD"
fi

# Collect all arguments for the java command.
save () {
    for i in "$@" ; do
        printf '%s\n' "$i"
    done
}

APP_ARGS=$(save "$@")

# Split up the JVM_OPTS And GRADLE_OPTS into an array, following shell quoting rules.
# shellcheck disable=SC2086
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS

exec "$JAVACMD" "$@" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain $APP_ARGS
